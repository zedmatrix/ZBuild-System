#
#         Blank Install zbuild
#   unset functions
#
unset -f Src_package
unset -f Src_prepare
unset -f Src_configure
unset -f Src_compile
unset -f Src_check
unset -f Src_install
unset -f Src_post
#
#   Build Functions
# 
# Extract the base package name and version
Src_package() {
    packagedir=${archive%.tar.*}       # Remove the .tar.gz (or .tar.bz2, etc.) part
    package=${packagedir%-*}               # Extracts the package name (everything before the last hyphe>
    pkgver=${packagedir##*-}           # Extracts the version (everything after the last hyphen)
}

Src_prepare () {
   echo "*** Preparing ${package} ***"

}

Src_configure () {
   echo "*** Configuring ${package} ***"

}
Src_compile () {
   echo "*** Compiling ${package} ***"
   pip3 wheel -w dist --no-cache-dir --no-build-isolation --no-deps $PWD
}
Src_check () {
   echo "*** Checking ${package} ***"

}
Src_install () {
   echo "*** Installing ${package} ***"
   pip3 install --no-index --no-user --find-links dist Jinja2
}
Src_post () {
   echo "*** Finalizing ${package} ***"

}

export -f Src_prepare
export -f Src_configure
export -f Src_compile
export -f Src_check
export -f Src_install
export -f Src_post
#
#   Define configure options
#
BUILD_SOURCE=/sources
BUILD_ROOT=/BUILD
export BUILD_SOURCE BUILD_ROOT

package=jinja2-3.1.4
archive=$(find $BUILD_SOURCE -name "${package}*.tar.*" | head -n 1 | xargs basename)
extract="true"
delete="true"
patch="false"

Src_package
#
# Start defining package specific options
# 

export package packagedir archive extract patch delete

$BUILD_ROOT/zbuild.sh
exit_code=$?

if [[ exit_code -ne 0 ]]; then
    echo "___ Error Code: $exit_code"
else
    echo "*** Success ***"
    unset -f Src_package
    unset -f Src_prepare
    unset -f Src_configure
    unset -f Src_compile
    unset -f Src_check
    unset -f Src_install
    unset -f Src_post
    unset package packagedir archive extract patch delete
fi

