#
#         Blank Install zbuild
#   unset functions
#
unset -f Src_package
unset -f Src_prepare
unset -f Src_configure
unset -f Src_compile
unset -f Src_check
unset -f Src_install
unset -f Src_post
#
#   Build Functions
# 
# Extract the base package name and version
Src_package() {
    packagedir=${archive%.tar.*}       # Remove the .tar.gz (or .tar.bz2, etc.) part
    package=${packagedir%-*}               # Extracts the package name (everything before the last hyphe>
    pkgver=${packagedir##*-}           # Extracts the version (everything after the last hyphen)
}

Src_prepare () {
   echo "*** Preparing ${package} ***"
  case $(uname -m) in
    x86_64)
      sed -e '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64
    ;;
  esac
  mkdir -v build
  cd build
}

Src_configure () {
   echo "*** Configuring ${package} ***"
   ../configure ${prefix} LD=ld ${enable} ${disable} ${with} || exit 88
}
Src_compile () {
   echo "*** Compiling ${package} ***"
   make || exit 77
}
Src_check () {
   echo "*** Checking ${package} ***"
   ulimit -s -H unlimited
   sed -e '/cpython/d' -i ../gcc/testsuite/gcc.dg/plugin/plugin.exp
   sed -e 's/no-pic /&-no-pie /' -i ../gcc/testsuite/gcc.target/i386/pr113689-1.c
   sed -e 's/300000/(1|300000)/' -i ../libgomp/testsuite/libgomp.c-c++-common/pr109062.c
   sed -e 's/{ target nonpic } //' -e '/GOTPCREL/d' -i ../gcc/testsuite/gcc.target/i386/fentryname3.c
   chown -R tester .
   su tester -c "PATH=$PATH make -k check" || exit 66
   ../contrib/test_summary
}
Src_install () {
   echo "*** Installing ${package} ***"
   make install || exit 55
   chown -vR root:root /usr/lib/gcc/$(gcc -dumpmachine)/14.2.0/include{,-fixed}
   ln -svr /usr/bin/cpp /usr/lib
   ln -sv gcc.1 /usr/share/man/man1/cc.1
   ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/14.2.0/liblto_plugin.so /usr/lib/bfd-plugins 
}
Src_post () {
   echo "*** Finalizing ${package} ***"
  echo "** test program **"
   echo 'int main(){}' > dummy.c
   cc dummy.c -v -Wl,--verbose &> dummy.log
   readelf -l a.out | grep ': /lib'
   grep -E -o '/usr/lib.*/S?crt[1in].*succeeded' dummy.log
   grep -B4 '^ /usr/include' dummy.log
   grep 'SEARCH.*/usr/lib' dummy.log | sed 's|; |\n|g'
   grep "/lib.*/libc.so.6 " dummy.log
   grep found dummy.log
   mkdir -pv /usr/share/gdb/auto-load/usr/lib
   mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

}

export -f Src_prepare
export -f Src_configure
export -f Src_compile
export -f Src_check
export -f Src_install
export -f Src_post
#
#   Define configure options
#
BUILD_SOURCE=/sources
BUILD_ROOT=/BUILD
export BUILD_SOURCE BUILD_ROOT

package=gcc-14.2.0
archive=$(find $BUILD_SOURCE -name "${package}*.tar.*" | head -n 1 | xargs basename)
extract="true"
delete="true"
patch="false"

Src_package
#
# Start defining package specific options
# 
prefix="--prefix=/usr"
enable="--enable-languages=c,c++ --enable-default-pie --enable-default-ssp --enable-host-pie"
disable="--disable-multilib --disable-bootstrap --disable-fixincludes"
with="--with-system-zlib"

export package packagedir archive extract patch delete
export prefix disable enable with

$BUILD_ROOT/zbuild.sh
exit_code=$?

if [[ exit_code -ne 0 ]]; then
    echo "___ Error Code: $exit_code"
else
    echo "*** Success ***"
    unset -f Src_package
    unset -f Src_prepare
    unset -f Src_configure
    unset -f Src_compile
    unset -f Src_check
    unset -f Src_install
    unset -f Src_post
    unset package packagedir archive extract patch delete
    unset prefix disable enable with
fi

