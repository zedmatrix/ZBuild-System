#!/bin/bash
#   8.05 - Glibc-2.40
#   unset functions
#
unset -f Src_prepare
unset -f Src_configure
unset -f Src_compile
unset -f Src_check
unset -f Src_install
unset -f Src_post
#
# Global Settings
#
[ -z "${ZBUILD_root}" ] && { echo "Error: ZBUILD_root not set. Exiting."; exit 2; }
ZBUILD_log=${ZBUILD_log:-"${ZBUILD_root}/Zbuild_log"}
ZBUILD_script=${ZBUILD_script:-"${ZBUILD_root}/zbuild2.sh"}

package=glibc-2.40
packagedir=${package}
archive=$(find ${ZBUILD_sources} -name "${package}*.tar.*" | sort -V | head -1 | xargs basename)
delete="true"
patch="glibc-2.40-fhs-1.patch"
prefix="--prefix=/usr"
disable="--disable-werror --disable-nscd"
enable="--enable-kernel=4.19 --enable-stack-protector=strong"

#
#   Build Functions
# 
Src_Extract() {
    zprint "Extracting: ${archive}"
    mkdir -v "${ZBUILD_root}/${packagedir}"
    tar -xf "${ZBUILD_sources}/${archive}" -C "${ZBUILD_root}/${packagedir}" --strip-components=1
}
# Executed After pushd into $ZBUILD_root/packagedir
Src_prepare() {
    zprint " Preparing ${packagedir} "
    mkdir -v build
    cd build
}
Src_configure() {
    zprint " Configuring ${packagedir} "
    echo "rootsbindir=/usr/sbin" > configparms
    ../configure ${prefix} ${disable} ${enable} libc_cv_slibdir=/usr/lib
}
Src_compile() {
    zprint " Compiling ${packagedir} "
    make || exit 77
}
Src_check() {
    zprint " Checking ${packagedir} "
    make check
    grep "Timed out" $(find -name \*.out)
}
Src_install() {
    zprint " Installing ${packagedir} "
    touch /etc/ld.so.conf
    sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile
    make install || exit 55
}
Src_post() {
    zprint " Finalizing ${package} "
    sed '/RTLDLIST=/s@/usr@@g' -i /usr/bin/ldd
}

export package packagedir archive delete patch prefix disable enable
export -f Src_Extract
export -f Src_prepare
export -f Src_configure
export -f Src_compile
export -f Src_check
export -f Src_install
export -f Src_post

if [ -f ${ZBUILD_script} ]; then
    ${ZBUILD_script}
else
    zprint "Error: Missing ZBUILD_script."
    exit 1
fi
exit_code=$?

if [[ $exit_code -ne 0 ]]; then
    zprint " Error Code: ${exit_code} "
else
    zprint " Success "
    unset -f Src_prepare
    unset -f Src_configure
    unset -f Src_compile
    unset -f Src_check
    unset -f Src_install
    unset -f Src_post
    unset package packagedir archive delete patch prefix disable enable
fi
